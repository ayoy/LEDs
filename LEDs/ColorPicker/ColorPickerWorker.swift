//
//  ColorPickerWorker.swift
//  
//
//  Created by Dominik Kapusta on 14/10/2017.
//  Copyright (c) 2017 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftSocket

func synchronized<T>(_ lock: AnyObject, _ body: () throws -> T) rethrows -> T {
    objc_sync_enter(lock)
    defer { objc_sync_exit(lock) }
    return try body()
}

extension UIColor {
    var hexData: Data {
        var r: CGFloat = 0
        var g: CGFloat = 0
        var b: CGFloat = 0
        var a: CGFloat = 0
        
        self.getRed(&r, green: &g, blue: &b, alpha: &a)
        
        r = max(0, min(1, r))
        g = max(0, min(1, g))
        b = max(0, min(1, b))

        var data = Data()
        data.append(UInt8(r * 0xff))
        data.append(UInt8(g * 0xff))
        data.append(UInt8(b * 0xff))
        return data
    }
}

class ColorPickerWorker: NSObject, URLSessionDelegate
{
    private var socket: TCPClient? = nil
    
    private let instanceMutex = PThreadMutex(type: .recursive)
    private var _isTaskInProgress: Bool = false
    var isTaskInProgress: Bool {
        get {
            var value: Bool = false
            instanceMutex.sync {
                value = _isTaskInProgress
            }
            return value
        }
        set {
            instanceMutex.sync {
                _isTaskInProgress = newValue
            }
        }
    }
    
    func connect(_ completionHandler: ((Error?) -> Void)) {
        if socket == nil {
            socket = TCPClient(address: "192.168.1.101", port: 4000)
            switch socket!.connect(timeout: 30) {
            case .success:
                completionHandler(nil)
                break
                
            case .failure(let error):
                NSLog("failed to connect: \(error)")
                completionHandler(error)
            }
        }
    }
    
    func getColor(_ completionHandler: @escaping (UInt8, UInt8, UInt8) -> Void) {

        if socket == nil {
            socket = TCPClient(address: "192.168.1.101", port: 4000)
            switch socket!.connect(timeout: 30) {
            case .success:
                break
                
            case .failure(let error):
                NSLog("failed to connect: \(error)")
            }
        }
        
        _ = socket?.send(string: "WAT")
        let bytes = socket?.read(3, timeout: 5)
        if let bytes = bytes, bytes.count == 3 {
            completionHandler(bytes[0], bytes[1], bytes[2])
        } else {
            completionHandler(0, 0, 0)
        }
        socket?.close()
        socket = nil
    }
    
    func setColor(_ color: UIColor) {
        if socket == nil {
            socket = TCPClient(address: "192.168.1.101", port: 4000)
            switch socket!.connect(timeout: 30) {
            case .success:
                break
                
            case .failure(let error):
                NSLog("failed to connect: \(error)")
            }
        }
        
        var data = "DIS".data(using: .utf8)!
        data.append(color.hexData)
        _ = socket?.send(data: data)
        socket?.close()
        socket = nil
    }

}
